services:
  # Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    ports:
      - "8080:8080"
    networks:
      - on-prem-net
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: securepassword
      KC_HOSTNAME: keycloak
      KC_HTTP_PORT: 8080
    command: start-dev
    volumes:
      - ./certs:/etc/ssl/certs:ro
      - keycloak_data:/opt/keycloak/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Policy Engine
  opa:
    image: openpolicyagent/opa:latest
    ports:
      - "8181:8181"
    volumes:
      - ./policies/v1:/policies
      - ./certs:/etc/ssl/certs:ro
      - ./opa-config.yaml:/config/opa-config.yaml
    entrypoint: ["opa"]
    command:
      [
        "run",
        "--server",
        "--log-level=debug",
        "--watch",
        "--addr=0.0.0.0:8181",
        "--config-file=/config/opa-config.yaml",
        "/policies",
      ]
    networks:
      - on-prem-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    image: kong:3.4
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    environment:
      KONG_DATABASE: "off"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_SSL_CERT: /etc/ssl/certs/server.crt
      KONG_SSL_CERT_KEY: /etc/ssl/certs/server.key
      KONG_SSL_CIPHER_SUITE: intermediate
      KONG_SSL_PROTOCOLS: TLSv1.2, TLSv1.3
    volumes:
      - ./services/api-gateway/gateway-config.yaml:/kong.yml:ro
      - ./certs:/etc/ssl/certs:ro
    networks:
      - on-prem-net
      - cloud-net
    depends_on:
      - keycloak
      - opa
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service
  backend-service:
    build:
      context: ./services/backend-service
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    networks:
      - cloud-net
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: backend
      DB_PASSWORD: backendpass
      DB_NAME: zerotrust
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres

  # Monitoring Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    networks:
      - on-prem-net
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    ports:
      - "5044:5044"
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    networks:
      - on-prem-net
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9600 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - on-prem-net
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
    networks:
      - on-prem-net
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./monitoring/alertmanager/templates:/etc/alertmanager/template:ro
      - alertmanager_data:/alertmanager
    networks:
      - on-prem-net
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9093/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - on-prem-net
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--path.rootfs=/rootfs"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9100/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - on-prem-net
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./monitoring/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/zero-trust-dashboard.json:ro
      - ./monitoring/grafana-dashboard-security.json:/etc/grafana/provisioning/dashboards/zero-trust-security-dashboard.json:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend-app:
    build:
      context: ./services/frontend-app
      dockerfile: Dockerfile
    ports:
      - "8082:80" # HTTP (primary for development)
      - "8081:443" # HTTPS (optional)
    networks:
      - on-prem-net
      - cloud-net
    volumes:
      - ./certs:/etc/nginx/ssl:ro
    depends_on:
      - keycloak
      - api-gateway
      - backend-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: backend
      POSTGRES_PASSWORD: backendpass
      POSTGRES_DB: zerotrust
    networks:
      - cloud-net
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U backend"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  on-prem-net:
    external: true
  cloud-net:
    external: true

volumes:
  elasticsearch_data:
  grafana_data:
  postgres_data:
  alertmanager_data:
  keycloak_data:
